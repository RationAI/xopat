var EmpationAPI;(()=>{"use strict";var t={d:(e,r)=>{for(var i in r)t.o(r,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:r[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{AbstractAPI:()=>d,EventSource:()=>i,HTTPError:()=>c,Logger:()=>a,RawAPI:()=>h,RootAPI:()=>p,RootContext:()=>l,STATUS_CODES:()=>n,ScopeContext:()=>y,ScopesAPI:()=>f,V3:()=>r,parseJwtToken:()=>s,sleep:()=>o});var r={};t.r(r),t.d(r,{Apps:()=>m,Cases:()=>b,Examinations:()=>R,Root:()=>U,Scopes:()=>E,Slides:()=>q,Storage:()=>I});class i{constructor(){this.events={}}addOnceHandler(t,e,r,i,n){const s=this;i=i||1;let o=0;const a=function(r){return o++,o===i&&s.removeHandler(t,a),e(r)};this.addHandler(t,a,r,n)}addHandler(t,e,r,n){let s=this.events[t];if(s||(this.events[t]=s=[]),e&&i.isFunction(e)){let t=s.length,i={handler:e,userData:r||null,priority:n||0};for(s[t]=i;t>0&&s[t-1].priority<s[t].priority;)s[t]=s[t-1],s[t-1]=i,t--}}removeHandler(t,e){const r=this.events[t],i=[];if(r&&Array.isArray(r)){for(let t=0;t<r.length;t++)r[t].handler!==e&&i.push(r[t]);this.events[t]=i}}numberOfHandlers(t){const e=this.events[t];return e?e.length:0}removeAllHandlers(t){if(t)this.events[t]=[];else for(const t in this.events)this.events[t]=[]}getHandler(t){let e=this.events[t];return e&&e.length?(e=1===e.length?[e[0]]:Array.apply(null,e),function(t,r){let i,n=e.length;for(i=0;i<n;i++)e[i]&&(r.eventSource=t,r.userData=e[i].userData,e[i].handler(r))}):null}raiseEvent(t,e){const r=this.getHandler(t);if(r)return r(this,e||{})}static isFunction(t){return"function"===this.type(t)}static type(t){return null==t?String(t):this.class2type[String.toString.call(t)]||"object"}}i.class2type={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object AsyncFunction]":"function","[object Promise]":"promise","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};const n={100:"Continue",101:"Switching protocols",102:"Processing",103:"Early Hints",200:"Ok",201:"Created",202:"Accepted",203:"Non Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Too Long",414:"Request Uri Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"Im A Teapot",419:"Insufficient Space On Resource",420:"Method Failure",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"Http Version Not Supported",507:"Insufficient Storage",511:"Network Authentication Required"};function s(t){return JSON.parse(atob(t.split(".")[1]))}function o(t){return new Promise((e=>setTimeout(e,t)))}class a{static error(...t){console.error("E:EmpationAPI",...t)}static warn(...t){console.warn("W:EmpationAPI",...t)}static info(...t){console.info("I:EmpationAPI",...t)}static debug(...t){console.debug("D:EmpationAPI",...t)}}var u=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class c extends Error{constructor(t,e,r){super(e||n[t]||`HTTP Code ${t}`),arguments.length>=3&&r&&Object.assign(this,r),this.name=function(t){const e=4==(t/100|0)||5==(t/100|0)?"error":"";return` ${String(n[t]||`HTTP Code ${t}`).replace(/error$/i,"")} ${e}`.split(" ").reduce(((t,e)=>t+(e?e.charAt(0).toUpperCase()+e.slice(1):"")))}(t),this.statusCode=t}}class h{constructor(t,e){this._queue=[],this.url=t,this._handler=e.errorHandler,this._maxRetryCount=void 0===e.maxRetryCount?4:e.maxRetryCount,this._timeout=e.nextRetryInMs||[5e3,1e4,2e4,3e4]}_parseQueryParams(t){if(t){if("string"==typeof t)return t;if(t.constructor===Object||void 0===t.constructor)for(let e in t){null==t[e]&&delete t[e]}return`?${new URLSearchParams(t)}`}return""}_setRetryIn(t,e){t>=this._maxRetryCount?a.error("Automated retry failed: maxRetryCount exceeded!"):this._retryRoutine=setTimeout(this._replay.bind(this,t),e),this._handler({queue:this._queue,retryCount:t,maxRetryCount:this._maxRetryCount,nextRetryInMs:e})}_recordFailed(t,e,r,i){this._queue.length<1&&this._setRetryIn(r,i),this._queue.push(Object.assign({url:t},e))}_replay(t=0){return u(this,void 0,void 0,(function*(){if(!(this._queue.length<1)){this._retryRoutine&&(clearTimeout(this._retryRoutine),this._retryRoutine=null);try{const t=this._queue[0];yield this._fetch(t.url,t),this._queue.shift()}catch(e){t++,a.warn("Replay attempt ",t," failed: ",e);const r=Array.isArray(this._timeout)?this._timeout[Math.min(this._timeout.length-1,t)]:this._timeout;throw this._setRetryIn(t,r),e}yield this._replay()}}))}_fetch(t,e){return u(this,void 0,void 0,(function*(){const r=yield fetch(t,{method:e.method,headers:e.headers,body:e.body});let i;try{i=yield r[e.responseType]()}catch(e){throw new c(500,`Failed to parse response data. Original status: ${r.status} | ${r.statusText}`,{url:t,error:e})}if(!r.ok)throw new c(r.status,r.statusText,i);return i}))}http(t,e){return u(this,void 0,void 0,(function*(){const r=!!e.body;e.method=e.method||(r?"POST":"GET"),t.startsWith("/")||(t=`/${t}`),e.query=this._parseQueryParams(e.query),e.headers=e.headers||{},e.headers["Content-Type"]="application/json",e.responseType=e.responseType||"json",e.body&&"string"!=typeof e.body?e.body=JSON.stringify(e.body):e.body=null;let i=null;try{return yield this._fetch(this.url+t+e.query,e)}catch(t){i=t}Array.isArray(this._timeout)&&this._timeout.length<1?this._timeout=[5e3]:this._timeout||(this._timeout=5e3);const n=Array.isArray(this._timeout)?this._timeout[0]:this._timeout;if(this._recordFailed(this.url+t+e.query,e,0,n),i)throw i}))}}class d extends i{getCallerName(){const t=Error.prepareStackTrace;Error.prepareStackTrace=(t,e)=>e;const{stack:e}=new Error;Error.prepareStackTrace=t;return e[2]||"unknown context"}requires(t,e){if(!e)throw`ArgumentError[${this.getCallerName()}] ${t} is missing - required property!`}raiseConnectionError(t){this.raiseEvent("connection-error",t)}}class l{}class p extends d{constructor(t){if(super(),!t.workbenchApiUrl)throw"WB Api url is required!";this.options=t,t.apiRootPath?t.apiRootPath.startsWith("/")?this.apiUrl=`${t.workbenchApiUrl}${t.apiRootPath}`:this.apiUrl=`${t.workbenchApiUrl}/${t.apiRootPath}`:this.apiUrl=t.workbenchApiUrl,this.apiUrl.endsWith("/")&&(this.apiUrl=this.apiUrl.slice(0,-1)),this.cached={}}}class y{}class f extends d{}var v=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class m extends l{constructor(t){super(),this.context=t}list(){return v(this,void 0,void 0,(function*(){return this.data=yield this.context.rawQuery("/apps/query",{method:"PUT",body:{apps:null,tissues:null,stains:null,job_modes:null}})}))}query(t){return v(this,void 0,void 0,(function*(){return this.data=yield this.context.rawQuery("/apps/query",{method:"PUT",body:t})}))}default(){return v(this,void 0,void 0,(function*(){this.data||(yield this.list());for(let t of this.data.items)if("MAP3"===t.name_short&&"rationai"===t.vendor_name){this._defaultApp=t;break}if(!this._defaultApp)throw"Default APP not present in the infrastructure! Was it imported?";return this._defaultApp}))}}const x=t=>("string"==typeof t&&(t=Number(t)),t);var g=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class w{constructor(t){this.context=t}use(t){this.identifierSeparator!==t&&(this.identifierSeparator=t)}getCaseValue(t,e){switch(t){case"year":return this.getCaseYear(e);case"month":return this.getCaseMonth(e);case"day":return this.getCaseDay(e);case"description":return this.getCaseDescription(e);case"tissues":return this.getCaseTissues(e);case"stains":return this.getCaseStains(e);default:if("id_part_"===t.slice(0,8)&&!isNaN(Number(t.slice(8))))return this.getCaseIdentifierPart(e,Number(t.slice(8)));throw`KeyError[CaseExplorer] "${t}" is not supported!`}}evaluateCaseValue(t,e,r){const i=this.getCaseValue(t,r);switch(t){case"year":return this.evaulateCaseYear(i,e);case"month":return this.evaulateCaseMonth(i,e);case"day":return this.evaulateCaseDay(i,e);case"description":return this.evaluateCaseDescription(i,e);case"tissues":return this.evaluateCaseTissues(i,e);case"stains":return this.evaluateCaseStains(i,e);default:return this.evaulateCaseIdentifierPart(i,e)}}getCaseYear(t){return(e=t.created_at,new Date(1e3*x(e)).getFullYear()).toString();var e}getCaseMonth(t){return(e=t.created_at,new Date(1e3*x(e)).getMonth()).toString();var e}getCaseDay(t){return(e=t.created_at,new Date(1e3*x(e)).getDate()).toString();var e}getCaseIdentifierPart(t,e){if(!this.identifierSeparator)throw"ArgumentError[CaseExplorer] identifierSeparator is missing - required property!";const r=new RegExp(this.identifierSeparator).exec(t.local_id);if(!r)return"SEPARATOR_ERROR";if(e<1||e>=r.length)throw'KeyError[CaseExplorer] invalid key "id_part_<index>", group index is not valid!';return r[e]}getCaseDescription(t){return t.description}getCaseTissues(t){return Object.keys(t.tissues)}getCaseStains(t){return Object.keys(t.stains)}evaulateCaseYear(t,e){return t===e}evaulateCaseMonth(t,e){return t===e}evaulateCaseDay(t,e){return t===e}evaulateCaseIdentifierPart(t,e){return t===e}evaluateCaseDescription(t,e){return((t,e)=>{const r=e.split(" ").filter(Boolean).map((t=>`(?=.*\\b${t}\\b)`)),i=new RegExp(r.join(""),"gim");return null!==t.match(i)})(t,e)}evaluateCaseTissues(t,e){return e.every((e=>Object.keys(t).includes(e)))}evaluateCaseStains(t,e){return e.every((e=>Object.keys(t).includes(e)))}hierarchyLevel(t,e,r,i){if(e>=t.length)return{levelName:i,lastLevel:!0,items:r};const n=(s=r=>{const i=this.getCaseValue(t[e],r);return Array.isArray(i)?i[0]||"":i},r.reduce(((t,e)=>{var r;return(t[r=s(e)]||(t[r]=[])).push(e),t}),{}));var s;const o=Object.keys(n).map((r=>"SEPARATOR_ERROR"===r?this.hierarchyLevel(t,t.length,n[r],r):this.hierarchyLevel(t,e+1,n[r],r)));return{levelName:i,lastLevel:!1,items:o}}hierarchy(t){return g(this,void 0,void 0,(function*(){const e=(yield this.context.list()).items;return this.hierarchyLevel(t,0,e)}))}search(t){return g(this,void 0,void 0,(function*(){let e=(yield this.context.list()).items;return t.forEach((({key:t,value:r})=>e=e.filter((e=>this.evaluateCaseValue(t,r,e))))),e}))}}var _=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class b extends l{constructor(t){super(),this.context=t,this.explorer=new w(this)}list(t=!0){return _(this,void 0,void 0,(function*(){return this.data=t&&this.data||(yield this.context.rawQuery("/cases"))}))}get(t){return _(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/cases/${t}`)}))}slides(t){return _(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/cases/${t}/slides`)}))}}var C=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class R extends l{constructor(t){super(),this.context=t}create(t,e){return C(this,void 0,void 0,(function*(){const r=this.context;return r.requires("caseId",t),r.rawQuery("/examinations",{method:"PUT",body:{case_id:t,app_id:e}})}))}query(t,e,r){return C(this,void 0,void 0,(function*(){return this.context.rawQuery("/examinations/query",{method:"PUT",body:t,query:{skip:e,limit:r}})}))}get(t){return C(this,void 0,void 0,(function*(){const e=this.context;return e.requires("examinationId",t),e.rawQuery(`/examinations/${t}`)}))}scope(t){return C(this,void 0,void 0,(function*(){const e=this.context;return e.requires("examinationId",t),e.rawQuery(`/examinations/${t}/scope`,{method:"PUT"})}))}}var P=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class I extends y{constructor(t){super(),this.context=t}getRaw(){return P(this,void 0,void 0,(function*(){return this.data||(this.data=yield this.context.rawQuery("/app-ui-storage/user")),this.data}))}flush(){return P(this,void 0,void 0,(function*(){if(this.data)return yield this.context.rawQuery("/app-ui-storage/user",{method:"PUT",body:this.data})}))}get(t){return P(this,void 0,void 0,(function*(){const e=yield this.getRaw();return"string"==typeof e.content[t]?JSON.parse(e.content[t]):e.content[t]}))}set(t,e,r){return P(this,void 0,void 0,(function*(){const i=JSON.stringify(e),n=yield this.getRaw();n.content[t]=i,this.data=n,r&&this.flush}))}erase(){return P(this,void 0,void 0,(function*(){this.data={content:{}},this.flush()}))}}var T=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class A extends f{constructor(t){super(),this.context=t,this.raw=new h(this.context.apiUrl+A.apiPath,{errorHandler:this.raiseConnectionError.bind(this),maxRetryCount:this.context.options.maxRetryCount,nextRetryInMs:this.context.options.nextRetryInMs}),this.storage=new I(this)}use(t,e=void 0){return T(this,void 0,void 0,(function*(){this.requires("root::userId",this.context.userId);const r=e=>T(this,void 0,void 0,(function*(){let r=yield this.context.examinations.query({apps:[e],creators:[this.context.userId]});return r.item_count>0&&(i=r.items.find((t=>"OPEN"===t.state))),i||(yield this.context.examinations.create(t,e))}));let i;if(e?i=yield r(e):this._defaultExaminationId&&(i=yield this.context.examinations.get(this._defaultExaminationId)),!i){let t=yield this.context.apps.default();i=yield r(t.app_id),this._defaultExaminationId=i.id}yield this.from(i)}))}get scopeToken(){var t;return null===(t=this.scopeContext)||void 0===t?void 0:t.access_token}from(t){return T(this,void 0,void 0,(function*(){this.reset(),this.scopeContext=yield this.context.examinations.scope(t.id),this._activeExaminationId=t.id;const e=1e3*s(this.scopeContext.access_token).exp-Date.now()-2e4||28e4;this._tokenRefetchInterval=setInterval((()=>T(this,void 0,void 0,(function*(){this.scopeContext=yield this.context.examinations.scope(t.id)}))),e),this.raiseEvent("init")}))}reset(){this._activeExaminationId=null,this.scopeContext=null,this._tokenRefetchInterval&&(clearInterval(this._tokenRefetchInterval),this._tokenRefetchInterval=null,this.raiseEvent("reset"))}rawQuery(t,e){return T(this,void 0,void 0,(function*(){this.requires("this.scopeContext",this.scopeContext),(e=e||{}).headers=e.headers||{},e.headers.Authorization=`Bearer ${this.scopeContext.access_token}`,t&&!t.startsWith("/")&&(t=`/${t}`);try{return yield this.raw.http(`/${this.scopeContext.scope_id}${t}`,e)}catch(r){if(401===r.statusCode)return this.scopeContext=yield this.context.examinations.scope(this._activeExaminationId),yield this.raw.http(`/${this.scopeContext.scope_id}${t}`,e);throw r}}))}}A.apiPath="/v3/scopes";const E=A;var S=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class q extends l{constructor(t){super(),this.context=t}slideInfo(t){return S(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/info`)}))}slideThumbnail(t,e,r,i){return S(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/thumbnail/max_size/${e}/${r}`,{query:{image_format:i},responseType:"blob"})}))}slideLabel(t,e,r,i){return S(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/label/max_size/${e}/${r}`,{query:{image_format:i},responseType:"blob"})}))}loadTile(t,e,r,i,n){return S(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/tile/level/${e}/tile/${r}/${i}`,{query:{image_format:n},responseType:"blob"})}))}}var $=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{u(i.next(t))}catch(t){s(t)}}function a(t){try{u(i.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class k extends p{constructor(t){super(t),this.version="v3",this.rootURI=this.apiUrl+k.apiPath,this.raw=new h(this.rootURI,{errorHandler:this.raiseConnectionError.bind(this),maxRetryCount:this.options.maxRetryCount,nextRetryInMs:this.options.nextRetryInMs}),this.scopes=new E(this),this.apps=new m(this),this.cases=new b(this),this.examinations=new R(this),this.slides=new q(this)}get userId(){return this._userId}use(t){return $(this,void 0,void 0,(function*(){this._userId!==t&&(this._userId=t,this.raiseEvent("init"))}))}rawQuery(t,e={}){return $(this,void 0,void 0,(function*(){return this.requires("this.userId",this._userId),(e=e||{}).headers=e.headers||{},e.headers["User-Id"]=this._userId,this._accessToken&&(e.headers.Authorization=e.headers.Authorization||`Bearer ${this._accessToken}`),this.raw.http(t,e)}))}from(t){return $(this,void 0,void 0,(function*(){this._accessToken=t;const e=s(t).sub;yield this.use(e)}))}reset(){this._userId=void 0,this.scopes.reset(),this.raiseEvent("reset")}}k.apiPath="/v3";const U=k;EmpationAPI=e})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,