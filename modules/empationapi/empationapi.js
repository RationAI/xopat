var EmpationAPI;(()=>{"use strict";var t={d:(e,i)=>{for(var n in i)t.o(i,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{AbstractAPI:()=>d,EventSource:()=>n,HTTPError:()=>c,Logger:()=>a,RawAPI:()=>h,RootAPI:()=>y,RootContext:()=>l,STATUS_CODES:()=>r,ScopeContext:()=>p,ScopesAPI:()=>f,V3:()=>i,parseJwtToken:()=>s,sleep:()=>o});var i={};t.r(i),t.d(i,{Apps:()=>m,Cases:()=>R,Examinations:()=>E,Root:()=>H,Scopes:()=>D,Slides:()=>M,Storage:()=>T});class n{constructor(){this.events={}}addOnceHandler(t,e,i,n,r){const s=this;n=n||1;let o=0;const a=function(i){return o++,o===n&&s.removeHandler(t,a),e(i)};this.addHandler(t,a,i,r)}addHandler(t,e,i,r){let s=this.events[t];if(s||(this.events[t]=s=[]),e&&n.isFunction(e)){let t=s.length,n={handler:e,userData:i||null,priority:r||0};for(s[t]=n;t>0&&s[t-1].priority<s[t].priority;)s[t]=s[t-1],s[t-1]=n,t--}}removeHandler(t,e){const i=this.events[t],n=[];if(i&&Array.isArray(i)){for(let t=0;t<i.length;t++)i[t].handler!==e&&n.push(i[t]);this.events[t]=n}}numberOfHandlers(t){const e=this.events[t];return e?e.length:0}removeAllHandlers(t){if(t)this.events[t]=[];else for(const t in this.events)this.events[t]=[]}getHandler(t){let e=this.events[t];return e&&e.length?(e=1===e.length?[e[0]]:Array.apply(null,e),function(t,i){let n,r=e.length;for(n=0;n<r;n++)e[n]&&(i.eventSource=t,i.userData=e[n].userData,e[n].handler(i))}):null}raiseEvent(t,e){const i=this.getHandler(t);if(i)return i(this,e||{})}static isFunction(t){return"function"===this.type(t)}static type(t){return null==t?String(t):this.class2type[String.toString.call(t)]||"object"}}n.class2type={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object AsyncFunction]":"function","[object Promise]":"promise","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};const r={100:"Continue",101:"Switching protocols",102:"Processing",103:"Early Hints",200:"Ok",201:"Created",202:"Accepted",203:"Non Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Too Long",414:"Request Uri Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"Im A Teapot",419:"Insufficient Space On Resource",420:"Method Failure",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"Http Version Not Supported",507:"Insufficient Storage",511:"Network Authentication Required"};function s(t){return JSON.parse(atob(t.split(".")[1]))}function o(t){return new Promise((e=>setTimeout(e,t)))}class a{static error(...t){console.error("E:EmpationAPI",...t)}static warn(...t){console.warn("W:EmpationAPI",...t)}static info(...t){console.info("I:EmpationAPI",...t)}static debug(...t){console.debug("D:EmpationAPI",...t)}}var u=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class c extends Error{constructor(t,e,i){super(e||r[t]||`HTTP Code ${t}`),arguments.length>=3&&i&&Object.assign(this,i),this.name=function(t){const e=4==(t/100|0)||5==(t/100|0)?"error":"";return` ${String(r[t]||`HTTP Code ${t}`).replace(/error$/i,"")} ${e}`.split(" ").reduce(((t,e)=>t+(e?e.charAt(0).toUpperCase()+e.slice(1):"")))}(t),this.statusCode=t}}class h{constructor(t,e){this._queue=[],this._retryRoutine=null,this.url=t,this._handler=e.errorHandler,this._maxRetryCount=e.maxRetryCount,this._timeout=e.nextRetryInMs}_parseQueryParams(t){if(t){if("string"==typeof t)return t;if(t.constructor===Object||void 0===t.constructor)for(let e in t){null==t[e]&&delete t[e]}return`?${new URLSearchParams(t)}`}return""}_setRetryIn(t,e){t>=this._maxRetryCount?a.error("Automated retry failed: maxRetryCount exceeded!"):this._retryRoutine=setTimeout(this._replay.bind(this,t),e),this._handler({queue:this._queue,retryCount:t,maxRetryCount:this._maxRetryCount,nextRetryInMs:e})}_recordFailed(t,e,i,n){this._queue.length<1&&this._setRetryIn(i,n),this._queue.push(Object.assign({url:t},e))}_replay(t=0){return u(this,void 0,void 0,(function*(){if(!(this._queue.length<1)){this._retryRoutine&&(clearTimeout(this._retryRoutine),this._retryRoutine=null);try{const t=this._queue[0];yield this._fetch(t.url,t),this._queue.shift()}catch(e){t++,a.warn("Replay attempt ",t," failed: ",e);const i=Array.isArray(this._timeout)?this._timeout[Math.min(this._timeout.length-1,t)]:this._timeout;throw this._setRetryIn(t,i),e}yield this._replay()}}))}_fetch(t,e){return u(this,void 0,void 0,(function*(){const i=yield fetch(t,{method:e.method,headers:e.headers,body:e.body});let n;try{n=yield i[e.responseType||"json"]()}catch(e){throw new c(500,`Failed to parse response data. Original status: ${i.status} | ${i.statusText}`,{url:t,error:e})}if(!i.ok)throw new c(i.status,i.statusText,n);return n}))}http(t,e){return u(this,void 0,void 0,(function*(){const i=!!e.body;e.method=e.method||(i?"POST":"GET"),t.startsWith("/")||(t=`/${t}`),e.query=this._parseQueryParams(e.query),e.headers=e.headers||{},e.headers["Content-Type"]="application/json",e.responseType=e.responseType,e.body&&"string"!=typeof e.body?e.body=JSON.stringify(e.body):e.body=void 0;let n=null;try{return yield this._fetch(this.url+t+e.query,e)}catch(t){n=t}Array.isArray(this._timeout)&&this._timeout.length<1?this._timeout=[5e3]:this._timeout||(this._timeout=5e3);const r=Array.isArray(this._timeout)?this._timeout[0]:this._timeout;if(this._recordFailed(this.url+t+e.query,e,0,r),n)throw n}))}}class d extends n{getCallerName(){const t=Error.prepareStackTrace;Error.prepareStackTrace=(t,e)=>e;const{stack:e}=new Error;Error.prepareStackTrace=t;return(null==e?void 0:e[2])||"unknown context"}requires(t,e){if(!e)throw`ArgumentError[${this.getCallerName()}] ${t} is missing - required property!`}raiseConnectionError(t){this.raiseEvent("connection-error",t)}}class l{}class y extends d{constructor(t){if(super(),!t.workbenchApiUrl)throw"WB Api url is required!";let e;e=t.apiRootPath?t.apiRootPath.startsWith("/")?`${t.workbenchApiUrl}${t.apiRootPath}`:`${t.workbenchApiUrl}/${t.apiRootPath}`:t.workbenchApiUrl,e.endsWith("/")&&(e=e.slice(0,-1)),this.options={apiUrl:e,workbenchApiUrl:t.workbenchApiUrl,anonymousUserId:t.anonymousUserId||"anonymous",apiRootPath:t.apiRootPath||"",maxRetryCount:void 0===t.maxRetryCount?4:t.maxRetryCount,nextRetryInMs:t.nextRetryInMs||[5e3,1e4,2e4,3e4]},this.cached={}}}class p{}class f extends d{}var v=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class m extends l{constructor(t){super(),this.data=null,this._defaultApp=null,this.context=t}list(){return v(this,void 0,void 0,(function*(){return this.data=yield this.context.rawQuery("/apps/query",{method:"PUT",body:{apps:null,tissues:null,stains:null,job_modes:null}})}))}query(t){return v(this,void 0,void 0,(function*(){return this.data=yield this.context.rawQuery("/apps/query",{method:"PUT",body:t})}))}default(){return v(this,void 0,void 0,(function*(){this.data||(yield this.list());for(let t of this.data.items)if("MAP3"===t.name_short&&"rationai"===t.vendor_name){this._defaultApp=t;break}if(!this._defaultApp)throw"Default APP not present in the infrastructure! Was it imported?";return this._defaultApp}))}}const x=t=>("string"==typeof t&&(t=Number(t)),t),w=(t,e,i,n)=>{const r=new RegExp(e).exec(t);return!(!r||i<1||i>=r.length)&&r[i]===n};var g=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class _{constructor(t){this.data=null,this.identifierSeparator="",this.context=t}use(t){this.identifierSeparator!==t&&(this.identifierSeparator=t)}getCaseValue(t,e){switch(t){case"year":return this.getCaseYear(e);case"month":return this.getCaseMonth(e);case"day":return this.getCaseDay(e);case"description":return this.getCaseDescription(e);case"tissues":return this.getCaseTissues(e);case"stains":return this.getCaseStains(e);default:if("id_part_"===t.slice(0,8)&&!isNaN(Number(t.slice(8))))return this.getCaseIdentifierPart(e,Number(t.slice(8)));throw`KeyError[CaseExplorer] "${t}" is not supported!`}}evaluateCaseValue(t,e,i){const n=this.getCaseValue(t,i);switch(t){case"year":return this.evaulateCaseYear(n,e);case"month":return this.evaulateCaseMonth(n,e);case"day":return this.evaulateCaseDay(n,e);case"description":return this.evaluateCaseDescription(n,e);case"tissues":return this.evaluateCaseTissues(n,e);case"stains":return this.evaluateCaseStains(n,e);default:return this.evaulateCaseIdentifierPart(n,e)}}getCaseYear(t){return(e=t.created_at,new Date(1e3*x(e)).getFullYear()).toString();var e}getCaseMonth(t){return(e=t.created_at,new Date(1e3*x(e)).getMonth()).toString();var e}getCaseDay(t){return(e=t.created_at,new Date(1e3*x(e)).getDate()).toString();var e}getCaseIdentifierPart(t,e){if(!this.identifierSeparator)throw"ArgumentError[CaseExplorer] identifierSeparator is missing - required property!";const i=new RegExp(this.identifierSeparator).exec(t.local_id||"");if(!i)return"OTHER";if(e<1||e>=i.length)throw'KeyError[CaseExplorer] invalid key "id_part_<index>", group index is not valid!';return i[e]}getCaseDescription(t){return t.description||""}getCaseTissues(t){return Object.keys(t.tissues)}getCaseStains(t){return Object.keys(t.stains)}evaulateCaseYear(t,e){return t===e}evaulateCaseMonth(t,e){return t===e}evaulateCaseDay(t,e){return t===e}evaulateCaseIdentifierPart(t,e){return t===e}evaluateCaseDescription(t,e){return((t,e)=>{const i=e.split(" ").filter(Boolean).map((t=>`(?=.*\\b${t}\\b)`)),n=new RegExp(i.join(""),"gim");return null!==t.match(n)})(t,e)}evaluateCaseTissues(t,e){return e.every((e=>Object.keys(t).includes(e)))}evaluateCaseStains(t,e){return e.every((e=>Object.keys(t).includes(e)))}hierarchyLevel(t,e,i,n){if(e>=t.length)return{levelName:n,lastLevel:!0,items:i};const r=(s=i=>{const n=this.getCaseValue(t[e],i);return Array.isArray(n)?n[0]||"":n},i.reduce(((t,e)=>{var i;return(t[i=s(e)]||(t[i]=[])).push(e),t}),{}));var s;const o=Object.keys(r).map((i=>"OTHER"===i?this.hierarchyLevel(t,t.length,r[i],i):this.hierarchyLevel(t,e+1,r[i],i)));return{levelName:n,lastLevel:!1,items:o}}hierarchy(t){return g(this,void 0,void 0,(function*(){const e=(yield this.context.list()).items;return this.hierarchyLevel(t,0,e)}))}search(t){return g(this,void 0,void 0,(function*(){let e=(yield this.context.list()).items;return t.forEach((({key:t,value:i})=>e=e.filter((e=>this.evaluateCaseValue(t,i,e))))),e}))}tissues(){return g(this,void 0,void 0,(function*(){const t=(yield this.context.list()).items,e=new Set;return t.forEach((t=>Object.values(t.tissues).map((t=>t.EN)).forEach((t=>e.add(t))))),[...e]}))}stains(){return g(this,void 0,void 0,(function*(){const t=(yield this.context.list()).items,e=new Set;return t.forEach((t=>Object.values(t.stains).map((t=>t.EN)).forEach((t=>e.add(t))))),[...e]}))}}var b=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class C{constructor(t){this.data=null,this.slidesData=null,this.masksData=null,this.maskIdentifierSeparator="",this.maskIdentifierValue="",this.context=t}use(t,e){this.maskIdentifierSeparator=t,this.maskIdentifierValue=e}getAllSlides(t){return b(this,void 0,void 0,(function*(){return this.data||(this.data=(yield this.context.slides(t)).items),this.data}))}actualSlides(t){return b(this,void 0,void 0,(function*(){return this.slidesData||(this.slidesData=(yield this.getAllSlides(t)).filter((t=>!w(t.local_id||"",this.maskIdentifierSeparator,1,this.maskIdentifierValue)))),this.slidesData}))}masks(t){return b(this,void 0,void 0,(function*(){return this.masksData||(this.masksData=(yield this.getAllSlides(t)).filter((t=>w(t.local_id||"",this.maskIdentifierSeparator,1,this.maskIdentifierValue)))),this.masksData}))}}var I=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class R extends l{constructor(t){super(),this.data=null,this.context=t,this.caseExplorer=new _(this),this.slideExplorer=new C(this)}list(){return I(this,void 0,void 0,(function*(){return this.data||(this.data=yield this.context.rawQuery("/cases")),this.data}))}get(t){return I(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/cases/${t}`)}))}slides(t){return I(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/cases/${t}/slides`)}))}}var P=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class E extends l{constructor(t){super(),this.data=null,this.context=t}create(t,e){return P(this,void 0,void 0,(function*(){const i=this.context;return i.requires("caseId",t),i.rawQuery("/examinations",{method:"PUT",body:{case_id:t,app_id:e}})}))}query(t,e,i){return P(this,void 0,void 0,(function*(){return this.context.rawQuery("/examinations/query",{method:"PUT",body:t,query:{skip:e,limit:i}})}))}get(t){return P(this,void 0,void 0,(function*(){const e=this.context;return e.requires("examinationId",t),e.rawQuery(`/examinations/${t}`)}))}scope(t){return P(this,void 0,void 0,(function*(){const e=this.context;return e.requires("examinationId",t),e.rawQuery(`/examinations/${t}/scope`,{method:"PUT"})}))}}var S=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class T extends p{constructor(t){super(),this.data=null,this.context=t}getRaw(){return S(this,void 0,void 0,(function*(){return this.data||(this.data=yield this.context.rawQuery("/app-ui-storage/user")),this.data}))}flush(){return S(this,void 0,void 0,(function*(){return this.data?yield this.context.rawQuery("/app-ui-storage/user",{method:"PUT",body:this.data}):null}))}get(t){return S(this,void 0,void 0,(function*(){const e=yield this.getRaw();return"string"==typeof e.content[t]?JSON.parse(e.content[t]):e.content[t]}))}set(t,e,i){return S(this,void 0,void 0,(function*(){const n=JSON.stringify(e),r=yield this.getRaw();r.content[t]=n,this.data=r,i&&this.flush()}))}erase(){return S(this,void 0,void 0,(function*(){this.data={content:{}},this.flush()}))}}var A=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class k extends p{constructor(t){super(),this.context=t}upload(t,e={}){return A(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/annotations",{method:"POST",query:e,body:this.data})}))}create(t,e={}){return A(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/annotations",{method:"POST",query:e,body:this.data})}))}delete(t){return A(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/annotations/${t}`,{method:"DELETE"})}))}update(t,e,i={}){return A(this,void 0,void 0,(function*(){return yield this.delete(t),!i.externalIds&&e.id&&(i.externalIds=!0),yield this.create(e,i)}))}}var q=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class $ extends p{constructor(t){super(),this.data=null,this.context=t}get(t){return q(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/collections/${t}`)}))}create(t){return q(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/collections",{method:"POST",body:t})}))}delete(t){return q(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/collections/${t}`,{method:"DELETE"})}))}queryItems(t,e){return q(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/collections/${t}/items/query`,{method:"PUT",body:e})}))}createItems(t,e){return q(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/collections/${t}/items`,{method:"POST",body:Object.assign({},e)})}))}deleteItem(t,e){return q(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/collections/${t}/items/${e}`,{method:"DELETE"})}))}}var O=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class U extends f{constructor(t){super(),this.scopeContext=null,this._defaultExaminationId="",this._activeExaminationId="",this._tokenRefetchInterval=null,this.context=t,this.raw=new h(this.context.options.apiUrl+U.apiPath,{errorHandler:this.raiseConnectionError.bind(this),maxRetryCount:this.context.options.maxRetryCount,nextRetryInMs:this.context.options.nextRetryInMs}),this.storage=new T(this),this.annotations=new k(this),this.collections=new $(this)}use(t,e=void 0){return O(this,void 0,void 0,(function*(){this.requires("root::userId",this.context.userId);const i=e=>O(this,void 0,void 0,(function*(){let i=yield this.context.examinations.query({apps:[e],creators:[this.context.userId]});if(i.item_count>0){let t=i.items.find((t=>"OPEN"===t.state));if(t)return t}return yield this.context.examinations.create(t,e)}));let n;if(e?n=yield i(e):this._defaultExaminationId&&(n=yield this.context.examinations.get(this._defaultExaminationId)),!n){let t=yield this.context.apps.default();n=yield i(t.app_id),this._defaultExaminationId=n.id}yield this.from(n)}))}get scopeToken(){var t;return null===(t=this.scopeContext)||void 0===t?void 0:t.access_token}from(t){return O(this,void 0,void 0,(function*(){this.reset(),this.scopeContext=yield this.context.examinations.scope(t.id),this._activeExaminationId=t.id;const e=1e3*s(this.scopeContext.access_token).exp-Date.now()-2e4||28e4;this._tokenRefetchInterval=setInterval((()=>O(this,void 0,void 0,(function*(){this.scopeContext=yield this.context.examinations.scope(t.id)}))),e),this.raiseEvent("init")}))}reset(){this._activeExaminationId="",this.scopeContext=null,this._tokenRefetchInterval&&(clearInterval(this._tokenRefetchInterval),this._tokenRefetchInterval=null,this.raiseEvent("reset"))}rawQuery(t,e){var i,n;return O(this,void 0,void 0,(function*(){this.requires("this.scopeContext",this.scopeContext),(e=e||{}).headers=e.headers||{},e.headers.Authorization=`Bearer ${null===(i=this.scopeContext)||void 0===i?void 0:i.access_token}`,t&&!t.startsWith("/")&&(t=`/${t}`);try{return yield this.raw.http(`/${null===(n=this.scopeContext)||void 0===n?void 0:n.scope_id}${t}`,e)}catch(i){if(401===i.statusCode)return this.scopeContext=yield this.context.examinations.scope(this._activeExaminationId),yield this.raw.http(`/${this.scopeContext.scope_id}${t}`,e);throw i}}))}}U.apiPath="/v3/scopes";const D=U;var j=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class M extends l{constructor(t){super(),this.data=null,this.context=t}slideInfo(t){return j(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/info`)}))}slideThumbnail(t,e,i,n){return j(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/thumbnail/max_size/${e}/${i}`,{query:{image_format:n},responseType:"blob"})}))}slideLabel(t,e,i,n){return j(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/label/max_size/${e}/${i}`,{query:{image_format:n},responseType:"blob"})}))}loadTile(t,e,i,n,r){return j(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/tile/level/${e}/tile/${i}/${n}`,{query:{image_format:r},responseType:"blob"})}))}}var Q=function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{u(n.next(t))}catch(t){s(t)}}function a(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class N extends y{constructor(t){super(t),this._accessToken=null,this.version="v3",this._userId=this.options.anonymousUserId,this.rootURI=this.options.apiUrl+N.apiPath,this.raw=new h(this.rootURI,{errorHandler:this.raiseConnectionError.bind(this),maxRetryCount:this.options.maxRetryCount,nextRetryInMs:this.options.nextRetryInMs}),this.scopes=new D(this),this.apps=new m(this),this.cases=new R(this),this.examinations=new E(this),this.slides=new M(this)}get userId(){return this._userId}use(t){return Q(this,void 0,void 0,(function*(){if(!t||t.length>50)throw"Invalid User ID! Must be valid string shorter than 50 characters!";this._userId!==t&&(this._userId=t,this.raiseEvent("init"))}))}rawQuery(t,e={}){return Q(this,void 0,void 0,(function*(){return(e=e||{}).headers=e.headers||{},e.headers["User-Id"]=this._userId,this._accessToken&&(e.headers.Authorization=e.headers.Authorization||`Bearer ${this._accessToken}`),this.raw.http(t,e)}))}from(t){return Q(this,void 0,void 0,(function*(){this._accessToken=t;const e=s(t).sub;yield this.use(e)}))}reset(){this._userId=this.options.anonymousUserId,this.scopes.reset(),this.raiseEvent("reset")}}N.apiPath="/v3";const H=N;EmpationAPI=e})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,