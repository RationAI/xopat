var EmpationAPI;(()=>{var t={732:t=>{function e(t){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}))}e.keys=()=>[],e.resolve=e,e.id=732,t.exports=e}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{"use strict";i.r(n),i.d(n,{AbstractAPI:()=>u,EventSource:()=>e,HTTPError:()=>o,Logger:()=>l,RawAPI:()=>a,RootAPI:()=>p,RootContext:()=>f,STATUS_CODES:()=>s,ScopeAPI:()=>y,ScopeContext:()=>v,V3:()=>t,getJwtTokenExpiresTimeout:()=>c,parseJwtToken:()=>d,sleep:()=>h});var t={};i.r(t),i.d(t,{Apps:()=>g,Cases:()=>C,Examinations:()=>_,RationAI:()=>rt,Root:()=>lt,Scope:()=>J,Slides:()=>B,Storage:()=>O});class e{constructor(){this.events={}}addOnceHandler(t,e,i,n,s){const r=this;n=n||1;let o=0;const a=function(i){return o++,o===n&&r.removeHandler(t,a),e(i)};this.addHandler(t,a,i,s)}addHandler(t,i,n=null,s=0){let r=this.events[t];if(r||(this.events[t]=r=[]),i&&e.isFunction(i)){let t=r.length,e={handler:i,userData:n||null,priority:s||0};for(r[t]=e;t>0&&r[t-1].priority<r[t].priority;)r[t]=r[t-1],r[t-1]=e,t--}}removeHandler(t,e){const i=this.events[t],n=[];if(i&&Array.isArray(i)){for(let t=0;t<i.length;t++)i[t].handler!==e&&n.push(i[t]);this.events[t]=n}}numberOfHandlers(t){const e=this.events[t];return e?e.length:0}removeAllHandlers(t){if(t)this.events[t]=[];else for(const t in this.events)this.events[t]=[]}getHandler(t){let e=this.events[t];return e&&e.length?(e=1===e.length?[e[0]]:Array.apply(null,e),function(t,i){let n,s=e.length;for(n=0;n<s;n++)e[n]&&(i.eventSource=t,i.userData=e[n].userData,e[n].handler(i))}):null}getAwaitingHandler(t){let i=this.events[t];return i&&i.length?(i=1===i.length?[i[0]]:Array.apply(null,i),function(t,n){return new Promise((s=>{const r=i.length;!function o(a){if(a>=r||!i[a])return s("Resolved!"),null;n.eventSource=t,n.userData=i[a].userData;let u=i[a].handler(n);return u=u&&"promise"===e.type(u)?u:Promise.resolve(),u.then((()=>o(a+1)))}(0)}))}):null}raiseEvent(t,e){const i=this.getHandler(t);if(i)return i(this,e||{})}raiseEventAwaiting(t,e){const i=this.getAwaitingHandler(t);return i?i(this,e||{}):Promise.resolve("No handler for this event registered.")}static isFunction(t){return"function"===this.type(t)}static type(t){return null==t?String(t):this.class2type[t.toString()]||("function"==typeof t?"function":"object")}}e.class2type={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object AsyncFunction]":"function","[object Promise]":"promise","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};const s={100:"Continue",101:"Switching protocols",102:"Processing",103:"Early Hints",200:"Ok",201:"Created",202:"Accepted",203:"Non Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Too Long",414:"Request Uri Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"Im A Teapot",419:"Insufficient Space On Resource",420:"Method Failure",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"Http Version Not Supported",507:"Insufficient Storage",511:"Network Authentication Required"};var r=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class o extends Error{constructor(t,e,i){super(e||s[t]||`HTTP Code ${t}`),arguments.length>=3&&i&&Object.assign(this,i),this.name=function(t){const e=4==(t/100|0)||5==(t/100|0)?"error":"";return` ${String(s[t]||`HTTP Code ${t}`).replace(/error$/i,"")} ${e}`.split(" ").reduce(((t,e)=>t+(e?e.charAt(0).toUpperCase()+e.slice(1):"")))}(t),this.statusCode=t}}class a{constructor(t,e={}){this.url=t,this.options=e}_parseQueryParams(t){if(t){if("string"==typeof t)return t;if(t.constructor===Object||void 0===t.constructor)for(let e in t){null==t[e]&&delete t[e]}return`?${new URLSearchParams(t)}`}return""}_fetch(t,e){return r(this,void 0,void 0,(function*(){const i=yield fetch(t,{method:e.method,headers:e.headers,body:e.body});let n;try{n=yield i[e.responseType||"json"]()}catch(e){throw new o(500,`Failed to parse response data. Original status: ${i.status} | ${i.statusText}`,{url:t,error:e})}if(!i.ok)throw new o(i.status,i.statusText,{payload:n});return n}))}http(t,e){return r(this,void 0,void 0,(function*(){const i=!!e.body;return e.method=e.method||(i?"POST":"GET"),t.startsWith("/")||(t=`/${t}`),e.query=this._parseQueryParams(e.query),e.headers=e.headers||{},e.headers["Content-Type"]="application/json",e.body&&"string"!=typeof e.body?e.body=JSON.stringify(e.body):e.body=void 0,yield this._fetch(this.url+t+e.query,e)}))}}class u extends e{getCallerName(){const t=Error.prepareStackTrace;Error.prepareStackTrace=(t,e)=>e;const{stack:e}=new Error;Error.prepareStackTrace=t;return(null==e?void 0:e[2])||"unknown context"}requires(t,e){if(!e)throw`ArgumentError[${this.getCallerName()}] ${t} is missing - required property!`}}function c(t){return 1e3*t.exp-Date.now()||3e5}function d(t){return JSON.parse(atob(t.split(".")[1]))}function h(t){return new Promise((e=>setTimeout(e,t)))}class l{static error(...t){console.error("E:EmpationAPI",...t)}static warn(...t){console.warn("W:EmpationAPI",...t)}static info(...t){console.info("I:EmpationAPI",...t)}static debug(...t){console.debug("D:EmpationAPI",...t)}}class f{}class p extends u{constructor(t){if(super(),this.accessToken=null,this._tokenExpires=0,this._rawToken="",!t.workbenchApiUrl)throw"WB Api url is required!";let e;e=t.apiRootPath?t.apiRootPath.startsWith("/")?`${t.workbenchApiUrl}${t.apiRootPath}`:`${t.workbenchApiUrl}/${t.apiRootPath}`:t.workbenchApiUrl,e.endsWith("/")&&(e=e.slice(0,-1)),this.options={apiUrl:e,workbenchApiUrl:t.workbenchApiUrl,anonymousUserId:t.anonymousUserId||"anonymous",apiRootPath:t.apiRootPath||""},this._userId=this.options.anonymousUserId,this.cached={}}from(t,e=!0){if(!t)return this.reset();this._rawToken=t,e=e&&!this.accessToken,this.accessToken=d(t);const i=c(this.accessToken);this._tokenExpires=Date.now()+i/2;let n=this.accessToken.sub;if(!n)throw"Invalid User ID! Must be valid string shorter than 50 characters!";n.length>50&&(console.warn("User ID exceeded 50 characters! Using User ID shortened to first 50 characters!"),n=n.slice(0,50)),this.userId!==n&&(this._userId=n,e&&this.raiseEvent("init"))}use(t,e=!0){if(e=e&&!this._userId,this.reset(),!t||t.length>50)throw"Invalid User ID! Must be valid string shorter than 50 characters!";this._userId=t,e&&this.raiseEvent("init_no_token")}reset(){this._rawToken="",this._tokenExpires=0,this.accessToken=null,this._userId=this.options.anonymousUserId,this.defaultScopeKey="",this.scopes.forEach((t=>t.reset())),this.scopes.clear(),this.raiseEvent("reset")}get userId(){return this._userId}get rawToken(){return this._rawToken}rawQuery(t,e){return i=this,n=void 0,r=function*(){if(!this._userId)throw"User must be configured to access Empaia API: either provide a valid 'anonymous' user ID through env variables, or configure the Root API with a valid token.";if(this._tokenExpires>0&&Date.now()>this._tokenExpires){const t={newToken:""};yield this.raiseEventAwaiting("token-refresh",t),this.from(t.newToken)}},new((s=void 0)||(s=Promise))((function(t,e){function o(t){try{u(r.next(t))}catch(t){e(t)}}function a(t){try{u(r.throw(t))}catch(t){e(t)}}function u(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(o,a)}u((r=r.apply(i,n||[])).next())}));var i,n,s,r}}class v{}class y extends u{}var m=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class g extends f{constructor(t){super(),this.data=null,this._defaultApp=null,this.context=t}list(){return m(this,void 0,void 0,(function*(){return this.data=yield this.context.rawQuery("/apps/query",{method:"PUT",body:{apps:null,tissues:null,stains:null,job_modes:null}})}))}query(t){return m(this,void 0,void 0,(function*(){return this.data=yield this.context.rawQuery("/apps/query",{method:"PUT",body:t})}))}default(){return m(this,void 0,void 0,(function*(){this.data||(yield this.list());for(let t of this.data.items)if("MAP3"===t.name_short&&"rationai"===t.vendor_name){this._defaultApp=t;break}if(!this._defaultApp)throw"Default APP not present in the infrastructure! Was it imported?";return this._defaultApp}))}}const x=t=>("string"==typeof t&&(t=Number(t)),t),w=(t,e,i,n)=>{const s=new RegExp(e).exec(t);return!(!s||i<1||i>=s.length)&&s[i]===n};var b=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class I{constructor(t,e){this.customCases=null,this.caseHierarchy=null,this.caseTissues=null,this.caseStains=null,this.identifierSeparator="",this.hierarchySpec=[],this.hierarchyNameOverrides={},this.context=t,this.integration=e}use(t,e,i={}){this.hierarchySpec=e,this.identifierSeparator=t,this.hierarchyNameOverrides=i}getCustomCases(){return b(this,void 0,void 0,(function*(){return this.customCases||(this.customCases=(yield this.context.list()).items.map((t=>Object.assign(Object.assign({},t),{pathInHierarchy:this.getCaseHierarchyPath(t)})))),this.customCases}))}getCaseHierarchyPath(t){if(!this.identifierSeparator||!this.hierarchySpec)throw"ArgumentError[CaseExplorer] identifierSeparator or hierarchySpec is missing - required property!";let e=!1;return this.hierarchySpec.reduce(((i,n)=>{const s=this.getCaseValue(n,t),r=e?i:`${i}/${s}`;return"OTHER"===s&&(e=!0),r}),"")}getCase(t){return b(this,void 0,void 0,(function*(){let e;return this.customCases&&(e=this.customCases.find((e=>e.id===t))),e||(e=yield this.context.get(t)),Object.assign(Object.assign({},e),{pathInHierarchy:this.getCaseHierarchyPath(e)})}))}getCaseValue(t,e){switch(t){case"year":return this.getCaseYear(e);case"month":return this.getCaseMonth(e);case"day":return this.getCaseDay(e);case"description":return this.getCaseDescription(e);case"tissues":return this.getCaseTissues(e);case"stains":return this.getCaseStains(e);default:if("id_part_"===t.slice(0,8)&&!isNaN(Number(t.slice(8))))return this.getCaseIdentifierPart(e,Number(t.slice(8)));throw`KeyError[CaseExplorer] "${t}" is not supported!`}}evaluateCaseValue(t,e,i){const n=this.getCaseValue(t,i);switch(t){case"year":return this.evaulateCaseYear(n,e);case"month":return this.evaulateCaseMonth(n,e);case"day":return this.evaulateCaseDay(n,e);case"description":return this.evaluateCaseDescription(n,e);case"tissues":return this.evaluateCaseTissues(n,e);case"stains":return this.evaluateCaseStains(n,e);default:return this.evaulateCaseIdentifierPart(n,e)}}getCaseYear(t){return(e=t.created_at,new Date(1e3*x(e)).getFullYear()).toString();var e}getCaseMonth(t){return(e=t.created_at,new Date(1e3*x(e)).getMonth()).toString();var e}getCaseDay(t){return(e=t.created_at,new Date(1e3*x(e)).getDate()).toString();var e}getCaseIdentifierPart(t,e){if(!this.identifierSeparator)throw"ArgumentError[CaseExplorer] identifierSeparator is missing - required property!";const i=new RegExp(this.identifierSeparator).exec(t.local_id||"");if(!i)return"OTHER";if(e<1||e>=i.length)throw'KeyError[CaseExplorer] invalid key "id_part_<index>", group index is not valid!';return i[e]}getCaseDescription(t){return t.description||""}getCaseTissues(t){return Object.keys(t.tissues)}getCaseStains(t){return Object.keys(t.stains)}evaulateCaseYear(t,e){return t===e}evaulateCaseMonth(t,e){return t===e}evaulateCaseDay(t,e){return t===e}evaulateCaseIdentifierPart(t,e){return t===e}evaluateCaseDescription(t,e){return((t,e)=>{const i=e.split(" ").filter(Boolean).map((t=>`(?=.*\\b${t}\\b)`)),n=new RegExp(i.join(""),"gim");return null!==t.match(n)})(t,e)}evaluateCaseTissues(t,e){return e instanceof Array||(e=[e]),e.every((e=>t.includes(e)))}evaluateCaseStains(t,e){return e instanceof Array||(e=[e]),e.every((e=>t.includes(e)))}hierarchyLevel(t,e,i,n,s,r,o){return b(this,void 0,void 0,(function*(){if(e>=t.length)return{levelId:s,levelName:r,lastLevel:!0,parent:o,items:i.map((t=>Object.assign(Object.assign({},t),{pathInHierarchy:n})))};const a=(u=i=>{const n=this.getCaseValue(t[e],i);return Array.isArray(n)?n[0]||"":n},i.reduce(((t,e)=>{var i;return(t[i=u(e)]||(t[i]=[])).push(e),t}),{}));var u;const c={levelName:r,levelId:s,lastLevel:!1,items:[]};return c.items=yield Promise.all(Object.keys(a).map((i=>b(this,void 0,void 0,(function*(){var s;let r=(null===(s=this.hierarchyNameOverrides[t[e]])||void 0===s?void 0:s[i])||(yield this.integration.translatePathSpec(t[e],i))||i;if("OTHER"===i){const e=yield this.hierarchyLevel(t,t.length,a[i],`${n}/${r}`,i,r);return e.parent=c,e}const o=yield this.hierarchyLevel(t,e+1,a[i],`${n}/${r}`,i,r);return o.parent=c,o}))))),c}))}hierarchy(){return b(this,void 0,void 0,(function*(){if(!this.caseHierarchy){const t=yield this.getCustomCases();this.caseHierarchy=yield this.hierarchyLevel(this.hierarchySpec,0,t,"")}return this.caseHierarchy}))}search(t){return b(this,void 0,void 0,(function*(){let e=yield this.getCustomCases();return t.forEach((({key:t,value:i})=>e=e.filter((e=>this.evaluateCaseValue(t,i,e))))),e}))}tissues(t="EN"){return b(this,void 0,void 0,(function*(){if(!this.caseTissues){const e=yield this.getCustomCases(),i=[];e.forEach((e=>Object.entries(e.tissues).map((([e,i])=>({name:e,locName:i[t]}))).forEach((t=>i.push(t))))),this.caseTissues=[...new Map(i.map((t=>[JSON.stringify([t.name,t.locName]),t]))).values()]}return this.caseTissues}))}stains(t="EN"){return b(this,void 0,void 0,(function*(){if(!this.caseStains){const e=yield this.getCustomCases(),i=[];e.forEach((e=>Object.entries(e.stains).map((([e,i])=>({name:e,locName:i[t]}))).forEach((t=>i.push(t))))),this.caseStains=[...new Map(i.map((t=>[JSON.stringify([t.name,t.locName]),t]))).values()]}return this.caseStains}))}}var T=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class P{constructor(t,e){this.lastCaseId=null,this.data=null,this.slidesData=null,this.masksData=null,this.maskIdentifierSeparator="",this.maskIdentifierValue="",this.context=t,this.integration=e}use(t,e){this.maskIdentifierSeparator=t,this.maskIdentifierValue=e}getAllSlides(t){return T(this,void 0,void 0,(function*(){return this.lastCaseId===t&&this.data||(this.data=(yield this.context.slides(t)).items),this.data}))}slides(t){return T(this,void 0,void 0,(function*(){return this.lastCaseId===t&&this.slidesData||(this.slidesData=(yield this.getAllSlides(t)).filter((t=>!w(t.local_id||"",this.maskIdentifierSeparator,1,this.maskIdentifierValue)))),this.slidesData}))}masks(t){return T(this,void 0,void 0,(function*(){return this.lastCaseId===t&&this.masksData||(this.masksData=(yield this.getAllSlides(t)).filter((t=>w(t.local_id||"",this.maskIdentifierSeparator,1,this.maskIdentifierValue)))),this.masksData}))}}var S=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class C extends f{constructor(t){super(),this.data=null,this.context=t,this.caseExplorer=new I(this,t.integration),this.wsiExplorer=new P(this,t.integration)}list(){return S(this,void 0,void 0,(function*(){return this.data||(this.data=yield this.context.rawQuery("/cases")),this.data}))}get(t){return S(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/cases/${t}`)}))}slides(t){return S(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/cases/${t}/slides`)}))}}var E=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class _ extends f{constructor(t){super(),this.data=null,this.context=t}create(t,e){return E(this,void 0,void 0,(function*(){const i=this.context;return i.requires("caseId",t),i.rawQuery("/examinations",{method:"PUT",body:{case_id:t,app_id:e}})}))}query(t,e,i){return E(this,void 0,void 0,(function*(){return this.context.rawQuery("/examinations/query",{method:"PUT",body:t,query:{skip:e,limit:i}})}))}get(t){return E(this,void 0,void 0,(function*(){const e=this.context;return e.requires("examinationId",t),e.rawQuery(`/examinations/${t}`)}))}scope(t){return E(this,void 0,void 0,(function*(){const e=this.context;return e.requires("examinationId",t),e.rawQuery(`/examinations/${t}/scope`,{method:"PUT"})}))}}var $=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class O extends v{constructor(t){super(),this.data=null,this.context=t}getRaw(){return $(this,void 0,void 0,(function*(){return this.data||(this.data=yield this.context.rawQuery("/app-ui-storage/user")),this.data}))}flush(){return $(this,void 0,void 0,(function*(){return this.data?yield this.context.rawQuery("/app-ui-storage/user",{method:"PUT",body:this.data}):null}))}get(t){return $(this,void 0,void 0,(function*(){const e=yield this.getRaw();return"string"==typeof e.content[t]?JSON.parse(e.content[t]):e.content[t]}))}set(t,e,i){return $(this,void 0,void 0,(function*(){const n=JSON.stringify(e),s=yield this.getRaw();s.content[t]=n,this.data=s,i&&this.flush()}))}erase(){return $(this,void 0,void 0,(function*(){this.data={content:{}},this.flush()}))}}var k=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class A extends v{constructor(t){super(),this.context=t}query(t,e=!0){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/annotations/query",{method:"PUT",query:{with_classes:e},body:t})}))}get(t,e=!0){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/annotations/${t}`,{query:{with_classes:e}})}))}createMany(t,e={}){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/annotations",{method:"POST",query:e,body:t})}))}create(t,e={}){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/annotations",{method:"POST",query:e,body:t})}))}deleteById(t){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/annotations/${t}`,{method:"DELETE"})}))}delete(t){return k(this,void 0,void 0,(function*(){if(!t.id)throw"Cannot delete annotation without ID property!";const e=yield this.deleteById(t.id);if(t.classes)for(let e of t.classes)e.id&&(yield this.deleteClass(e.id));return e}))}update(t,e,i={}){return k(this,void 0,void 0,(function*(){return yield this.deleteById(t),!i.externalIds&&e.id&&(i.externalIds=!0),yield this.create(e,i)}))}addClass(t){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/classes",{method:"POST",body:t})}))}addClassMany(t){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/classes",{method:"POST",body:t})}))}getClass(t){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/classes/${t}`)}))}deleteClass(t){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/classes/${t}`,{method:"DELETE"})}))}queryClasses(t){return k(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/classes/query",{method:"PUT",body:t})}))}}var U=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class N extends v{constructor(t){super(),this.data=null,this.context=t}get(t){return U(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/collections/${t}`)}))}create(t){return U(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/collections",{method:"POST",body:t})}))}delete(t){return U(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/collections/${t}`,{method:"DELETE"})}))}queryItems(t,e){return U(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/collections/${t}/items/query`,{method:"PUT",body:e})}))}createItems(t,e){return U(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/collections/${t}/items`,{method:"POST",body:Object.assign({},e)})}))}deleteItem(t,e){return U(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/collections/${t}/items/${e}`,{method:"DELETE"})}))}}var j=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class D extends v{constructor(t){super(),this.data=null,this.context=t}getJobs(){return j(this,void 0,void 0,(function*(){return(yield this.context.rawQuery("/jobs")).items}))}get(t){return j(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/jobs/${t}`)}))}}var R=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class Q extends v{constructor(t){super(),this.data=null,this.context=t}get(t){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}`)}))}post(t){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/pixelmaps",{method:"POST",body:t})}))}delete(t){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}`,{method:"DELETE"})}))}query(t){return R(this,void 0,void 0,(function*(){return(yield this.context.rawQuery("/pixelmaps/query",{method:"PUT",body:t})).items}))}getTile(t,e,i,n){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}/level/${e}/position/${i}/${n}/data`,{responseType:"blob"})}))}uploadTile(t,e,i,n,s){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}/level/${e}/position/${i}/${n}/data`,{method:"PUT",body:s})}))}deleteTile(t,e,i,n){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}/level/${e}/position/${i}/${n}/data`,{method:"DELETE"})}))}bulkGetTile(t,e,i,n,s,r){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}/level/${e}/position/start/${i}/${n}/end/${s}/${r}/data`,{responseType:"blob"})}))}bulkUploadTile(t,e,i,n,s,r,o){return R(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/pixelmaps/${t}/level/${e}/position/start/${i}/${n}/end/${s}/${r}/data`,{method:"PUT",body:o})}))}}var q=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class M extends y{constructor(t){super(),this.scopeContext=null,this._defaultExaminationId="",this._tokenRefetchInterval=null,this.activeExaminationId="",this.activeCaseId="",this.activeAppId="",this.context=t,this.raw=new a(this.context.options.apiUrl+M.apiPath),this.storage=new O(this),this.annotations=new A(this),this.collections=new N(this),this.jobs=new D(this),this.pixelmaps=new Q(this)}use(t,e=void 0){return q(this,void 0,void 0,(function*(){this.requires("root::userId",this.context.userId);const i=e=>q(this,void 0,void 0,(function*(){let i=yield this.context.examinations.query({apps:[e],creators:[this.context.userId]});if(i.item_count>0){let t=i.items.find((t=>"OPEN"===t.state));if(t)return t}return yield this.context.examinations.create(t,e)}));let n;if(e?n=yield i(e):this._defaultExaminationId&&(n=yield this.context.examinations.get(this._defaultExaminationId)),!n){let t=yield this.context.apps.default();n=yield i(t.app_id),this._defaultExaminationId=n.id}yield this.from(n)}))}get scopeToken(){var t;return(null===(t=this.scopeContext)||void 0===t?void 0:t.access_token)||""}get id(){var t;return(null===(t=this.scopeContext)||void 0===t?void 0:t.scope_id)||""}from(t){return q(this,void 0,void 0,(function*(){this.reset(),this.scopeContext=yield this.context.examinations.scope(t.id),this.activeCaseId=t.case_id,this.activeAppId=t.app_id,this.activeExaminationId=t.id;const e=c(d(this.scopeContext.access_token));this._tokenRefetchInterval=setInterval((()=>q(this,void 0,void 0,(function*(){this.scopeContext=yield this.context.examinations.scope(t.id)}))),e),this.raiseEvent("init")}))}reset(){this.activeExaminationId="",this.scopeContext=null,this._tokenRefetchInterval&&(clearInterval(this._tokenRefetchInterval),this._tokenRefetchInterval=null,this.raiseEvent("reset"))}rawQuery(t,e){var i,n;return q(this,void 0,void 0,(function*(){this.requires("this.scopeContext",this.scopeContext),(e=e||{}).headers=e.headers||{},e.headers.Authorization=`Bearer ${null===(i=this.scopeContext)||void 0===i?void 0:i.access_token}`,t&&!t.startsWith("/")&&(t=`/${t}`);try{return yield this.raw.http(`/${null===(n=this.scopeContext)||void 0===n?void 0:n.scope_id}${t}`,e)}catch(i){if(401===i.statusCode)return this.scopeContext=yield this.context.examinations.scope(this.activeExaminationId),yield this.raw.http(`/${this.scopeContext.scope_id}${t}`,e);throw i}}))}}M.apiPath="/v3/scopes";const J=M;var H,L,V,F=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class B extends f{constructor(t){super(),this.data=null,this.context=t}slideInfo(t){return F(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/info`)}))}slideThumbnail(t,e,i,n){return F(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/thumbnail/max_size/${e}/${i}`,{query:{image_format:n},responseType:"blob"})}))}slideLabel(t,e,i,n){return F(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/label/max_size/${e}/${i}`,{query:{image_format:n},responseType:"blob"})}))}loadTile(t,e,i,n,s){return F(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/slides/${t}/tile/level/${e}/tile/${i}/${n}`,{query:{image_format:s},responseType:"blob"})}))}}!function(t){t.USER="user",t.SCOPE="scope",t.JOB="job"}(H||(H={})),function(t){t.ANNOTATION="annotation",t.COLLECTION="collection",t.CLASS="class",t.PRIMITIVE="primitive",t.WSI="wsi",t.CASE="case",t.USER="user",t.SCOPE="scope",t.JOB="job"}(L||(L={})),function(t){t.Background="background",t.Params="params",t.Shader="shader",t.Visualization="visualization"}(V||(V={}));var z=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class W{constructor(t){this.data=null,this.defaultSlideMetadata={visualization:{}},this.defaultMaskMetadata={},this.context=t}getWsiMetadataItem(t,e=!0){return z(this,void 0,void 0,(function*(){let i=(yield this.context.query({references:[t]})).find((t=>t.data_type===(e?"slide":"mask")+"_metadata"));return i||(i=yield this.createWsiMetadataItem(t,e?this.defaultSlideMetadata:this.defaultMaskMetadata)),i}))}createWsiMetadataItem(t,e,i=!0){return z(this,void 0,void 0,(function*(){return yield this.context.createValue(e,`Metadata of ${i?"slide":"mask"} ${t}`,void 0,t,L.WSI,(i?"slide":"mask")+"_metadata")}))}getSlideMetadata(t){return z(this,void 0,void 0,(function*(){return JSON.parse((yield this.getWsiMetadataItem(t)).value)}))}updateSlideMetadata(t,e){return z(this,void 0,void 0,(function*(){const i=yield this.getWsiMetadataItem(t);try{const t=yield this.context.update(i.id,Object.assign(Object.assign({},i),{value:JSON.stringify(e)}));return JSON.parse(t.value)}catch(t){return!1}}))}getShadersConfig(t){return z(this,void 0,void 0,(function*(){const e={};for(let i=0;i<t.length;i++){const n=yield this.context.visTemplates.getTemplate(V.Shader,t[i].shaderTemplate);e[t[i].id]=Object.assign(Object.assign({},n),{name:t[i].name||t[i].id,dataReferences:t[i].dataRefs})}return e}))}getVisualizations(t){var e;return z(this,void 0,void 0,(function*(){const i=(yield this.getSlideMetadata(t)).visualization;return{params:i.paramsTemplate&&(yield this.context.visTemplates.getTemplate(V.Params,i.paramsTemplate))||void 0,data:i.data,background:Object.assign(Object.assign({},i.background?yield this.context.visTemplates.getTemplate(V.Background,null===(e=i.background)||void 0===e?void 0:e.template):{}),{data:i.background&&i.background.dataRef}),visualizations:i.visualizations&&(yield Promise.all(i.visualizations.map((t=>z(this,void 0,void 0,(function*(){return Object.assign(Object.assign({},yield this.context.visTemplates.getTemplate(V.Visualization,t.visTemplate)),{name:t.name,shaders:yield this.getShadersConfig(t.shaders)})}))))))}}))}getMaskMetadata(t){return z(this,void 0,void 0,(function*(){return JSON.parse((yield this.getWsiMetadataItem(t,!1)).value)}))}}var G=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};const K="vis_templates";class Y{constructor(t){this.data=null,this.context=t}fetchTemplateItem(t,e){return G(this,void 0,void 0,(function*(){return(yield this.context.query({references:[null],data_types:[`${K}_${t}`]})).find((t=>t.name===e))}))}getTemplate(t,e){return G(this,void 0,void 0,(function*(){const i=yield this.fetchTemplateItem(t,e);return!!i&&JSON.parse(i.value)}))}createTemplate(t,e,i){return G(this,void 0,void 0,(function*(){return!(yield this.fetchTemplateItem(t,e))&&(yield this.context.createValue(i,`${e}`,void 0,void 0,void 0,`${K}_${t}`))}))}deleteTemplate(t,e){return G(this,void 0,void 0,(function*(){const i=yield this.fetchTemplateItem(t,e);return!!i&&(yield this.context.delete(i.id),!0)}))}}var X=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class Z{constructor(t){this.data=null,this.presetDataType="annot_presets",this.context=t}use(t){this.presetDataType=t}getPresetsItem(t=!1){return X(this,void 0,void 0,(function*(){if(!this.data||t){let t=(yield this.context.query({references:[null],data_types:[this.presetDataType]})).find((t=>!0));t||(t=yield this.createPresetsItem({presets:[]})),this.data=t}return this.data}))}createPresetsItem(t){return X(this,void 0,void 0,(function*(){return yield this.context.createValue(t,"Global annotation presets",void 0,void 0,void 0,this.presetDataType)}))}getAnnotPresets(t=!1){return X(this,void 0,void 0,(function*(){const e=yield this.getPresetsItem(t);return{presets:JSON.parse(e.value).presets,lastModifiedAt:e.modified_at}}))}mergePresets(t,e,i){const n=[...t];return e.forEach((t=>n.some((e=>e.id===t.id))||!t.createdAt||t.createdAt<=i?null:n.push(t))),n}updateAnnotPresets(t,e,i=!1){return X(this,void 0,void 0,(function*(){const n=yield this.getPresetsItem(!0),s=JSON.parse(n.value).presets;let r=t,o=!0;if(n.modified_at!==e){if(i)return{presets:s,successfulUpdate:!1,lastModifiedAt:n.modified_at};r=this.mergePresets(s,r,e),o=!1}try{const t=yield this.context.update(n.id,Object.assign(Object.assign({},n),{value:JSON.stringify({presets:r})}));return{presets:JSON.parse(t.value).presets,successfulUpdate:o,lastModifiedAt:t.modified_at}}catch(t){if(409===t.statusCode){const t=yield this.updateAnnotPresets(r,n.modified_at);return Object.assign(Object.assign({},t),{successfulUpdate:o})}throw t}}))}deleteAnnotPresets(){return X(this,void 0,void 0,(function*(){const t=yield this.getPresetsItem(!0);yield this.context.delete(t.id),this.data=null}))}}var tt=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class et{constructor(t){this.data=null,this.configDataType="app_job_config",this.context=t}use(t){this.configDataType=t}fetchJobConfigItem(t){return tt(this,void 0,void 0,(function*(){return(yield this.context.query({references:[t],data_types:[this.configDataType]})).find(Boolean)}))}getJobConfig(t){return tt(this,void 0,void 0,(function*(){const e=yield this.fetchJobConfigItem(t);return!!e&&JSON.parse(e.value)}))}createJobConfig(t,e){return tt(this,void 0,void 0,(function*(){return!(yield this.fetchJobConfigItem(t))&&(yield this.context.createValue(e,"Job config of App",void 0,t,L.JOB,this.configDataType))}))}deleteJobConfig(t){return tt(this,void 0,void 0,(function*(){const e=yield this.fetchJobConfigItem(t);return!!e&&(yield this.context.delete(e.id),!0)}))}}var it=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class nt{constructor(t){this.data=null,this.context=t,this.wsiMetadata=new W(this),this.visTemplates=new Y(this),this.annotPresets=new Z(this),this.jobConfig=new et(this)}get(t){return it(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/global-storage/${t}`)}))}getValue(t){return it(this,void 0,void 0,(function*(){const e=yield this.get(t);if("string"===e.type)try{return JSON.parse(e.value)}catch(t){return e.value}return e.value}))}query(t){return it(this,void 0,void 0,(function*(){return(yield this.context.rawQuery("/global-storage/query",{method:"PUT",body:t})).items}))}create(t){return it(this,void 0,void 0,(function*(){return yield this.context.rawQuery("/global-storage",{method:"POST",body:t})}))}createValue(t,e,i,n,s,r){return it(this,void 0,void 0,(function*(){t=JSON.stringify(t);const o={name:e,description:i,creator_id:this.context.userId,creator_type:H.USER,reference_id:n,reference_type:s,type:"string",value:t,data_type:r};return yield this.create(o)}))}update(t,e){return it(this,void 0,void 0,(function*(){return yield this.context.rawQuery(`/global-storage/${t}`,{method:"PUT",body:e})}))}updateValue(t,e){return it(this,void 0,void 0,(function*(){const i=yield this.context.rawQuery(`/global-storage/${t}`);return i.value=JSON.stringify(e),yield this.context.rawQuery(`/global-storage/${t}`,{method:"PUT",body:i})}))}delete(t){return it(this,void 0,void 0,(function*(){yield this.context.rawQuery(`/global-storage/${t}`,{method:"DELETE"})}))}}class st{constructor(t){this.context=t,this.globalStorage=new nt(this)}get userId(){return this.context.userId}rawQuery(t,e={}){return i=this,n=void 0,r=function*(){return this.context.rawQuery(`${st.relativeApiPath}${t}`,e)},new((s=void 0)||(s=Promise))((function(t,e){function o(t){try{u(r.next(t))}catch(t){e(t)}}function a(t){try{u(r.throw(t))}catch(t){e(t)}}function u(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(o,a)}u((r=r.apply(i,n||[])).next())}));var i,n,s,r}}st.relativeApiPath="/rationai";const rt=st;class ot{constructor(t){if(void 0===t._context)throw Error("Private property not configured.");this.context=t._context,this.props=t}translatePathSpec(t,e){return i=this,n=void 0,r=function*(){return e},new((s=void 0)||(s=Promise))((function(t,e){function o(t){try{u(r.next(t))}catch(t){e(t)}}function a(t){try{u(r.throw(t))}catch(t){e(t)}}function u(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(o,a)}u((r=r.apply(i,n||[])).next())}));var i,n,s,r}}var at=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class ut{constructor(){throw Error("Not instantiable.")}static register(t,e){return this.items.set(t,e),e}static get(t){return this.items.get(t)}}ut.items=new Map;const ct=ut;ct.register("default",ot),ct.register("lsaai",class extends ot{translatePathSpec(t,e){return at(this,void 0,void 0,(function*(){return this.context.accessToken&&this.props.userinfo?(this.userData||(yield this.parseUserInstitutionsAndProjects()),"id_part_1"===t?this.userData.institutions[e]||e:"id_part_2"===t&&this.userData.projects[e]||e):e}))}parseGroupName(t){if(!t)return{name:t,slug:t};const e=(t=decodeURIComponent(t).trim()).match(/^(.+)\.\s*([^.\s]{1,5})$/);return e&&3===e.length?{name:e[1].trim(),slug:e[2].trim()}:t.length>5?(console.warn("Invalid group name",t),{}):{name:t,slug:t}}parseUserInstitutionsAndProjects(){var t;return at(this,void 0,void 0,(function*(){const e=yield fetch(this.props.userinfo,{headers:{Authorization:`Bearer ${this.context.accessToken}`}}),i=yield e.text();if(!e.ok)throw new Error(`Failed to fetch user info! ${e.statusText}. ${i}`);const n=JSON.parse(i),s=this.userData={projects:{"":{label:"NO PROJECT",value:"",rights:["write"]}},institutions:{"":{label:"PUBLIC DATA",value:""}}};try{const e=n.eduperson_entitlement;if(e)for(const i of e){const e=i.match(/^.*?:group:ration_ai:([^#\n]*)/);if(e&&e.length>1){const i=null===(t=e[1])||void 0===t?void 0:t.split(":");if(i){const t=i.length,e=this.parseGroupName(i[0]),n=this.parseGroupName(t>1?i[1]:""),r=this.parseGroupName(t>2?i[2]:null);n.slug&&!s.institutions[n.slug]&&(s.institutions[n.slug]={label:n.name,value:n.slug}),e.slug&&!s.projects[e.slug]?s.projects[e.slug]={label:e.name,value:e.slug,rights:r?[r]:[]}:r&&e.slug&&s.projects[e.slug].rights.push(r.slug)}}else console.warn("Ignored entitlement",i)}else console.warn("User info data does not contain access information! Is OAUTH scope set correctly?")}catch(t){console.warn("Could not decide user authorization capabilities!",t)}}))}});var dt=function(t,e,i,n){return new(i||(i=Promise))((function(s,r){function o(t){try{u(n.next(t))}catch(t){r(t)}}function a(t){try{u(n.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}u((n=n.apply(t,e||[])).next())}))};class ht extends p{constructor(t){super(t),this.defaultScopeKey="",this.version="v3",this.rootURI=this.options.apiUrl+ht.apiPath,this.raw=new a(this.rootURI),t.integrationOptions||(t.integrationOptions={}),t.integrationOptions._context=this;const e=t.integrationOptions.implementation||"default",i=ct.get(e);if(!i)throw new Error(`Could not instantiate integration provider ${e} - is it a valid name?`);this.integration=new i(t.integrationOptions),this.apps=new g(this),this.cases=new C(this),this.examinations=new _(this),this.slides=new B(this),this.rationai=new rt(this),this.scopes=new Map}get defaultScope(){return this.scopes.get(this.defaultScopeKey)}newScopeFrom(t){return dt(this,void 0,void 0,(function*(){const e=new J(this);return yield e.from(t),this.scopes.set(t.id,e),""===this.defaultScopeKey&&(this.defaultScopeKey=t.id),e}))}newScopeUse(t,e){return dt(this,void 0,void 0,(function*(){const i=new J(this);return yield i.use(t,e),this.scopes.set(i.activeExaminationId,i),""===this.defaultScopeKey&&(this.defaultScopeKey=i.activeExaminationId),i}))}getScopeFrom(t){return dt(this,void 0,void 0,(function*(){return this.scopes.get(t.id)||(yield this.newScopeFrom(t))}))}getScopeUse(t,e){return dt(this,void 0,void 0,(function*(){const i=[...this.scopes.values()].filter((i=>i.activeCaseId===t&&(!e||i.activeAppId===e)));return i.length>0?i[0]:yield this.newScopeUse(t,e)}))}rawQuery(t,e={}){const i=Object.create(null,{rawQuery:{get:()=>super.rawQuery}});return dt(this,void 0,void 0,(function*(){return yield i.rawQuery.call(this,t,e),(e=e||{}).headers=e.headers||{},e.headers["User-Id"]=this.userId,this.accessToken&&(e.headers.Authorization=e.headers.Authorization||`Bearer ${this.rawToken}`),this.raw.http(t,e)}))}}ht.apiPath="/v3";const lt=ht})(),EmpationAPI=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
